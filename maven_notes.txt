################
# maven basics
################

# get the maven version
mvn --version
mvn -v

# maven coordinates = groupId, artifactId, version

# create a basic pom.xml
- only using properties

ex:
<properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>11</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
</properties>

# clean - removes target folder and class or jars
mvn clean

# package - creates target folder and jar for the application
# (gradle build creates build folder)
mvn package

nothing is created if not a proper folder structure

# always folder structure as:
src/main/java
src/test/java

src/main/resources
src/test/resources

# clean and package at the same time
mvn clean package

- add dependencies in pom.xml
- however, dependent jars are only used in compile time
- not included in the final fat jar of the application jar

# build a maven project in intellij without using archetype
- use the side blotter Maven -> Lifecycle to clean and package
- IntelliJ Build project at top pane should not be used


#####################
# maven coordinates
#####################

- used to identify artifacts or location in a maven repository, thats why the name as "coordinates"

- groupId: companies url
- artifactId: project name
- version

- groupId and version can be inherited from a parent POM
- thus submodules only need new artifactId

# any version with suffix as SNAPSHOT:
- dev version, unstable and maven will check the newer version from repo


#####################
# maven repositories
#####################

- locations where project artifacts are stored
- 3 types:
local - repository on local file system = <user_home>/.m2/
central - public repository hosted by maven community = https://repo1.maven.org/maven2/
remote - private or public = JBoss, Oracle, Atlassian or internal companies repo

Project <-> local in ~/.m2/ <-> central, others

- folder contains all the cached artifacts here:
~/.m2/repository/

- central repository : easier to search in https://mvnrepository.com/

# maven wagon -- need some more understanding**
- proxy settings in companies may require Maven Wagon


#####################
# maven POM
#####################

- POM = Project Object Model
- must comply with maven-4.0.0.xsd
- poms can inherit properties from a parent pom

- Effective-POM is with all inherited properties
mvn help:effective-pom

- IntelliJ : right click -> Maven -> Show Effective-POM


#####################
# maven dependencies
#####################

- dependency = a jar or pom
- transitive = cyclic dependencies not supported
- can chose versions

- when multiple versions available, 'nearest definition' is used
A->B; A->D 2.0; B->D 1.5
D version 2.0 will be included

- can exlude dependencies
- can mark it optional - submodules no need to inherit it

# Scope
3 main classpaths: compile (default), runtime (not required for compile!), test
Can use "system" scope to add jar manually from a file path

# useful goals - there should be similar steps for IntelliJ
mvn dependency:tree - shows the dependency tree. Useful for resolving conflicts
mvn dependency:go-offline - Resolve all, prepare to go offline
mvn dependency:purge-local-repository - Clear artifacts from local repository
mvn dependency:sources - get sources for all dependencies.

########################
# maven build lifecycles
########################

lifecycle -> phases -> plugin goals

- lifecycle is a pre-defined group of build steps called "phases"
- each phase can be bound to one or more plugin "goals"
- all work done in Maven is done by plugins!
- lifecycles and phases provide the framework to call plugin goals in sequence

3 predefined lifecycles: clean, default, site

###### clean ######
- remove all build artifacts from working directory
- basically remove everythng compiled or generated and target/ folder
- plugin bindings available

3 phases: pre-clean -> clean -> post-clean
- only clean phase has plugin binding => Maven Clean Plugin => Goal: clean
mvn clean

###### default ######
- build and deployment of project
- no plugin bindings available (ex: for jar, war, etc)

Phases: very detailed, below are high level:
- validate: pom, dir structure etc
- compile: compile source code
- test: test compiled source code
- package: package compiled files to packaging type
- verify: run integration tests
- install: install to local Maven Repository (~/.m2/)
- deploy: deploy to shared Maven Repository

Jar packaging
- mvn process-resources
- mvn compile
- mvn process-test-resources
- mvn test-compile
- mvn test
- mvn package
- mvn install
- mvn deploy

###### site ######
- create the website for project
- plugin bindings available
- hardly used in company :)

4 phases:
Pre-site
Site
Post-site
Site-Deploy


#################
# Maven Wrappers
#################
- wrapper over maven so that can be run from shell prompt or cmd
- no need to install maven on the machine - can just use maven wrapper
- command to generate mvn wrapper (take the version same as "mvn -v")
 mvn -N io.takari:maven:wrapper -Dmaven=3.8.1


##################
# Maven Archetypes
##################
- project templates
- same as what used in IntelliJ like maven-archetype-quickstart
- mvn plugin:goal
- example
mvn archetype:generate


################
# Maven Plugins
################
1) CLEAN
- only one goal - 'clean'
- removes /target

2) DEFAULT
2.1 Compiler Plugin
- 2 goals - compiler:compile, compiler:testCompile
- default compiler: 'javax.tools.JavaCompiler' - may be changed to javac
- default Java 1.6 - should be changed

2.2 Resources plugin
- 3 goals - resources:resources, resources:testResources, resources:copy-resources














